"""
handlers.py ‚Äì –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
"""

import requests
from aiogram import types, Router
from aiogram.filters import Command
from .bot import API_URL
from bot.keyboards import orders_keyboard, admin_keyboard

router = Router()

@router.message(Command("start"))
async def start(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await message.answer(
        "üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FlowerDeliveryBot! \n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /orders.",
        reply_markup=orders_keyboard
    )

@router.message(Command("orders"))
async def get_orders(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"""
    response = requests.get(f"{API_URL}/orders/")
    if response.status_code == 200:
        orders = response.json()
        text = "üìã **–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:**\n\n"
        for order in orders:
            text += f"üÜî {order['id']} | {order['status']}\n"
        await message.answer(text, parse_mode="Markdown")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.")

@router.message(Command("order"))
async def get_order_detail(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    try:
        order_id = int(message.text.split()[1])
        response = requests.get(f"{API_URL}/orders/{order_id}/")
        if response.status_code == 200:
            order = response.json()
            text = (
                f"üõí **–ó–∞–∫–∞–∑ {order['id']}**\n"
                f"üì¶ –¢–æ–≤–∞—Ä—ã: {order['items']}\n"
                f"üìç –î–æ—Å—Ç–∞–≤–∫–∞: {order['delivery_address']}\n"
                f"üìÖ –î–∞—Ç–∞: {order['created_at']}\n"
                f"üìå –°—Ç–∞—Ç—É—Å: {order['status']}"
            )
            await message.answer(text, parse_mode="Markdown")
        else:
            await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except (IndexError, ValueError):
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞. –ü—Ä–∏–º–µ—Ä: `/order 123`")

@router.callback_query()
async def handle_callback(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    if call.data == "refresh":
        await get_orders(call.message)
    elif call.data in ["confirm", "in_delivery", "cancel"]:
        order_id = call.message.text.split()[1]  # ID –∑–∞–∫–∞–∑–∞
        new_status = {"confirm": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω", "in_delivery": "–í –¥–æ—Å—Ç–∞–≤–∫–µ", "cancel": "–û—Ç–º–µ–Ω–µ–Ω"}[call.data]
        response = requests.post(f"{API_URL}/orders/{order_id}/", json={"status": new_status})
        if response.status_code == 200:
            await call.message.answer(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} —Ç–µ–ø–µ—Ä—å {new_status}")
        else:
            await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")