"""
bot.py ‚Äì –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
"""
import os
import sys
import logging
import asyncio
import aiohttp
import django
from asgiref.sync import sync_to_async
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup
from django.conf import settings    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ DEBUG
    format='%(asctime)s - %(levelname)s - %(message)s',  # –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
)
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

# –ò—Å–ø–æ–ª—å–∑—É–µ–º logging.debug –≤–º–µ—Å—Ç–æ print
logging.debug("üîç PYTHONPATH: %s", sys.path)

# –£–∫–∞–∑—ã–≤–∞–µ–º Django, –≥–¥–µ –∏—Å–∫–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "flowers.settings")

# –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ setup()
if not django.conf.settings.configured:
    try:
        django.setup()
        print("‚úÖ Django –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
    except RuntimeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Django setup: {e}")
        sys.exit(1)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
TOKEN = settings.TELEGRAM_BOT_TOKEN
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
ADMIN_ID = settings.TELEGRAM_ADMIN_ID

# URL API Django-—Å–µ—Ä–≤–µ—Ä–∞
API_URL = settings.API_URL


# üîπ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
customer_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")],
])

staff_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")],
    [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
    [InlineKeyboardButton(text="üöö –í –¥–æ—Å—Ç–∞–≤–∫–µ", callback_data="in_delivery")],
])

admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")],
    [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
    [InlineKeyboardButton(text="üöö –í –¥–æ—Å—Ç–∞–≤–∫–µ", callback_data="in_delivery")],
    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")],
    [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")]
])

request_contact_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
    resize_keyboard=True
)

# from core.models import User, Order  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–∫–∞–∑–∞
# üîπ –ü—Ä–∏–≤—è–∑–∫–∞ Telegram ID
@dp.message(Command("start"))
async def start(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""

    user = await get_user_by_telegram_id(message.from_user.id)

    if user:
        keyboard = get_user_keyboard(user)
        await message.answer("üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", reply_markup=keyboard)
    else:
        await message.answer(
            "üîë –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç, —á—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å Telegram ID.",
            reply_markup=request_contact_keyboard
        )

async def get_user_by_telegram_id(telegram_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
    from core.models import User
    return await asyncio.to_thread(User.objects.filter, telegram_id=telegram_id).first()

def get_user_keyboard(user):
    """–í—ã–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏"""
    if user.is_admin:
        return admin_keyboard
    elif user.is_staff:
        return staff_keyboard
    return customer_keyboard

@dp.message(F.contact)
async def register_telegram_id(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç Telegram ID"""
    user_phone = message.contact.phone_number
    from core.models import User

    user = await asyncio.to_thread(User.objects.filter, phone_number=user_phone).first()

    if user:
        user.telegram_id = message.from_user.id
        await asyncio.to_thread(user.save)
        keyboard = get_user_keyboard(user)
        await message.answer("‚úÖ Telegram ID —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ.")

# üîπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
async def notify_admin(order_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""

    try:
        from core.models import Order
        order = await asyncio.to_thread(Order.objects.get, id=order_id)
        message = (
            f"üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n"
            f"üìå *ID*: {order.id}\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*: {order.user.username}\n"
            f"üì¶ *–¢–æ–≤–∞—Ä—ã*: {order.products.all().count()} —à—Ç.\n"
            f"üìç *–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞*: {order.order_date.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìå *–°—Ç–∞—Ç—É—Å*: {order.get_status_display()}"
        )
        await bot.send_message(chat_id=ADMIN_ID, text=message, parse_mode="Markdown")
    except Order.DoesNotExist:
        print(f"–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# üîπ –ö–Ω–æ–ø–∫–∞ "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
@dp.callback_query(F.data == "analytics")
async def send_analytics(call: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤"""
    from core.models import Order
    total_orders = await asyncio.to_thread(Order.objects.count)
    total_revenue = await asyncio.to_thread(lambda: sum(order.total_price for order in Order.objects.all()))

    message = (
        f"üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂*\n"
        f"üì¶ *–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤*: {total_orders}\n"
        f"üí∞ *–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞*: {total_revenue} —Ä—É–±."
    )

    await call.message.answer(message, parse_mode="Markdown")

@dp.message(Command("link"))
async def link_telegram(message: types.Message):
    """–ü—Ä–∏–≤—è–∑–∫–∞ Telegram ID –∫ –∞–∫–∫–∞—É–Ω—Ç—É"""
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /link <ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")
        return

    user_id = int(args[1])
    from core.models import User  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏

    user = await sync_to_async(User.objects.filter)(id=user_id)
    if user.exists():
        user = await sync_to_async(user.update)(telegram_id=message.from_user.id)
        await message.reply("‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!")
    else:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")



# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /orders
@dp.message(Command("orders"))
async def get_orders(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"""
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/orders/") as response:
            if response.status == 200:
                orders = await response.json()
                text = "üìã **–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:**\n\n"
                for order in orders:
                    text += f"üÜî {order['id']} | {order['status']}\n"
                if message.from_user.id == ADMIN_ID:
                    for order in orders:
                        keyboard = admin_keyboard(order["id"])
                        await message.answer(f"üÜî –ó–∞–∫–∞–∑ {order['id']} | –°—Ç–∞—Ç—É—Å: {order['status']}",
                                             reply_markup=keyboard)
                else:
                    await message.answer(text, parse_mode="Markdown")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.")


# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /order <id>
@dp.message(Command("order"))
async def get_order_detail(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    try:
        order_id = int(message.text.split()[1])
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/orders/{order_id}/") as response:
                if response.status == 200:
                    order = await response.json()
                    text = (
                        f"üõí **–ó–∞–∫–∞–∑ {order['id']}**\n"
                        f"üì¶ –¢–æ–≤–∞—Ä—ã: {order['items']}\n"
                        f"üìç –î–æ—Å—Ç–∞–≤–∫–∞: {order['delivery_address']}\n"
                        f"üìÖ –î–∞—Ç–∞: {order['created_at']}\n"
                        f"üìå –°—Ç–∞—Ç—É—Å: {order['status']}"
                    )
                    await message.answer(text, parse_mode="Markdown")
                else:
                    await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except (IndexError, ValueError):
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞. –ü—Ä–∏–º–µ—Ä: `/order 123`")

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ (–∞–¥–º–∏–Ω–∫–∞)
@dp.callback_query()
async def handle_callback(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∫–∏"""
    if call.from_user.id != ADMIN_ID:
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º order_id –∏–∑ callback_data
    data_parts = call.data.split("_")
    if len(data_parts) != 2:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
        return

    action, order_id = data_parts
    if not order_id.isdigit():
        await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–∫–∞–∑–∞.", show_alert=True)
        return

    order_id = int(order_id)

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π mapping (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ë–î)
    status_mapping = {
        "confirm": "processing",      # "–í —Ä–∞–±–æ—Ç–µ"
        "in_delivery": "delivering",  # "–í –¥–æ—Å—Ç–∞–≤–∫–µ"
        "cancel": "canceled"          # "–û—Ç–º–µ–Ω–µ–Ω"
    }

    if action not in status_mapping:
        await call.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!", show_alert=True)
        return

    new_status = status_mapping[action]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ API
    async with aiohttp.ClientSession() as session:
        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: {API_URL}/orders/{order_id}/update/ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {new_status}")
        async with session.post(f"{API_URL}/orders/{order_id}/update/", json={"status": new_status}) as response:
            if response.status == 200:
                await call.message.answer(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} —Ç–µ–ø–µ—Ä—å {new_status}", reply_markup=admin_keyboard(order_id))
            else:
                await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())



