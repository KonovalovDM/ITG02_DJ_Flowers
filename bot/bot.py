"""
bot.py ‚Äì –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
"""
import os
import sys
import logging
import asyncio
import aiohttp
import django
from asgiref.sync import sync_to_async
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup
from django.conf import settings    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.filters.callback_data import CallbackData


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ DEBUG
    format='%(asctime)s - %(levelname)s - %(message)s',  # –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
)
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

# –ò—Å–ø–æ–ª—å–∑—É–µ–º logging.debug –≤–º–µ—Å—Ç–æ print
logging.debug("üîç PYTHONPATH: %s", sys.path)

# –£–∫–∞–∑—ã–≤–∞–µ–º Django, –≥–¥–µ –∏—Å–∫–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "flowers.settings")

# –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ setup()
if not django.conf.settings.configured:
    try:
        django.setup()
        print("‚úÖ Django –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
    except RuntimeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Django setup: {e}")
        sys.exit(1)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
user_data = {}


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
TOKEN = settings.TELEGRAM_BOT_TOKEN
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
ADMIN_ID = settings.TELEGRAM_ADMIN_ID

# URL API Django-—Å–µ—Ä–≤–µ—Ä–∞
API_URL = settings.API_URL

# üîπ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
customer_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")],
])

staff_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")],
    [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
    [InlineKeyboardButton(text="üöö –í –¥–æ—Å—Ç–∞–≤–∫–µ", callback_data="in_delivery")],
])

admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")],
    [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
    [InlineKeyboardButton(text="üöö –í –¥–æ—Å—Ç–∞–≤–∫–µ", callback_data="in_delivery")],
    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")],
    [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")]
])

def create_admin_keyboard(order_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data=f"orders_{order_id}")],
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{order_id}")],
        [InlineKeyboardButton(text="üöö –í –¥–æ—Å—Ç–∞–≤–∫–µ", callback_data=f"in_delivery_{order_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{order_id}")],
        [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")]
    ])

def get_keyboard_for_user(user):
    """–í—ã–±–∏—Ä–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user.is_superuser:
        return admin_keyboard
    elif user.is_staff:
        return staff_keyboard
    return customer_keyboard


request_contact_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
    resize_keyboard=True
)

# from core.models import User, Order  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–∫–∞–∑–∞

# üîπ –ü—Ä–∏–≤—è–∑–∫–∞ Telegram ID
@dp.message(Command("start"))
async def start(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from core.models import User  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    telegram_id = message.from_user.id
    username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await sync_to_async(User.objects.filter(telegram_id=telegram_id).first, thread_sensitive=True)()

    if user:
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if user.is_admin:
            keyboard = admin_keyboard  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        elif user.is_staff:
            keyboard = staff_keyboard  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        else:
            keyboard = customer_keyboard  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞

#        keyboard = get_keyboard_for_user(user)  # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer("üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", reply_markup=keyboard)

    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
        await message.answer("üîπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        dp.message.register(get_user_name, F.text)

# –ë–ª–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –Ω–∞—á–∞–ª–æ

@dp.callback_query(lambda c: c.data == 'orders')
async def process_orders(callback_query: types.CallbackQuery):
    await callback_query.answer("üì¶ –¢—É—Ç –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤.")

@dp.callback_query(lambda c: c.data == 'confirm')
async def process_confirm(callback_query: types.CallbackQuery):
    await callback_query.answer("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")

@dp.callback_query(lambda c: c.data == 'in_delivery')
async def process_delivery(callback_query: types.CallbackQuery):
    await callback_query.answer("üöö –ó–∞–∫–∞–∑ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ.")

@dp.callback_query(lambda c: c.data.startswith("orders_"))
async def process_order(callback_query: types.CallbackQuery):
    order_id = callback_query.data.split("_")[1]
    keyboard = create_admin_keyboard(order_id)  # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
    await callback_query.message.edit_text(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É {order_id}", reply_markup=keyboard)

# –ë–ª–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –∫–æ–Ω–µ—Ü

async def get_user_name(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from core.models import User  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    telegram_id = message.from_user.id
    username = message.from_user.username
    full_name = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    user_data[telegram_id] = {"full_name": full_name, "username": username}

    request_contact_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
        resize_keyboard=True
    )

    await message.answer("üìû –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                         reply_markup=request_contact_keyboard)


@dp.message(F.contact)
async def register_user(message: types.Message):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É"""
    from core.models import User  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    telegram_id = message.from_user.id
    phone_number = message.contact.phone_number

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è
    user_info = user_data.pop(telegram_id, {})
    full_name = user_info.get("full_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    username = user_info.get("username", None)

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user = await sync_to_async(User.objects.create)(
        telegram_id=telegram_id,
        username=username or f"user_{telegram_id}",
        first_name=full_name,
        phone_number=phone_number
    )

    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.", reply_markup=customer_keyboard)


# üîπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
async def notify_admin(order_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""

    try:
        from core.models import Order
        order = await asyncio.to_thread(Order.objects.get, id=order_id)
        message = (
            f"üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n"
            f"üìå *ID*: {order.id}\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*: {order.user.username}\n"
            f"üì¶ *–¢–æ–≤–∞—Ä—ã*: {order.products.all().count()} —à—Ç.\n"
            f"üìç *–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞*: {order.order_date.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìå *–°—Ç–∞—Ç—É—Å*: {order.get_status_display()}"
        )
        await bot.send_message(chat_id=ADMIN_ID, text=message, parse_mode="HTML")
    except Order.DoesNotExist:
        print(f"–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# üîπ –ö–Ω–æ–ø–∫–∞ "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
@dp.callback_query(F.data == "analytics")
async def send_analytics(call: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤"""
    from core.models import Order
    total_orders = await asyncio.to_thread(Order.objects.count)
    total_revenue = await asyncio.to_thread(lambda: sum(order.total_price for order in Order.objects.all()))

    message = (
        f"üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂*\n"
        f"üì¶ *–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤*: {total_orders}\n"
        f"üí∞ *–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞*: {total_revenue} —Ä—É–±."
    )

    await call.message.answer(message, parse_mode="HTML")

@dp.message(Command("link"))
async def link_telegram(message: types.Message):
    """–ü—Ä–∏–≤—è–∑–∫–∞ Telegram ID –∫ –∞–∫–∫–∞—É–Ω—Ç—É"""
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /link <ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")
        return

    user_id = int(args[1])
    from core.models import User  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏

    user = await sync_to_async(User.objects.filter(id=user_id).first)()
    if user:
        user.telegram_id = message.from_user.id  # –ü—Ä–∏–≤—è–∑–∫–∞ Telegram ID
        await sync_to_async(user.save)()
        await message.reply("‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!")
    else:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")




# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /orders
@dp.message(Command("orders"))
async def get_orders(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"""
    headers = {"Authorization": f"Bearer {settings.TELEGRAM_BOT_TOKEN}"}
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/orders/", headers=headers) as response:
            if response.status == 200:
                orders = await response.json()
                if not orders:
                    await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
                    return

                text = "üìã **–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:**\n\n"
                for order in orders:
                    products_list = ", ".join([product['name'] for product in order['products']])
                    text += f"üÜî {order['id']} | –¢–æ–≤–∞—Ä—ã: {products_list} | –°—Ç–∞—Ç—É—Å: {order['status']}\n"

                await message.answer(text, parse_mode="HTML")
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤. –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API: {response.status}")
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞
                response_text = await response.text()
                print(f"API response: {response_text}")





# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /order <id>
@dp.message(Command("order"))
async def order_detail(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    try:
        order_id = int(message.text.split()[1])
        headers = {"Authorization": f"Bearer {settings.TELEGRAM_BOT_TOKEN}"}
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/orders/{order_id}/", headers=headers) as response:
                if response.status == 200:
                    order = await response.json()
                    delivery_address = order.get('delivery_address', '–ù–µ —É–∫–∞–∑–∞–Ω')

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∑–∞–∫–∞–∑–∞ –∏–∑ –ø–æ–ª—è 'created_at', –∫–æ—Ç–æ—Ä–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ 'order_date' –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                    created_at = order.get('created_at',
                                           '–î–∞—Ç–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞')  # –£–∂–µ –ø–æ–ª—É—á–∞–µ–º –∫–∞–∫ 'created_at' —á–µ—Ä–µ–∑ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä

                    products_list = ", ".join([product['name'] for product in order['products']])
                    text = (
                        f"üõí **–ó–∞–∫–∞–∑ {order['id']}**\n"
                        f"üì¶ –¢–æ–≤–∞—Ä—ã: {products_list}\n"
                        f"üìç –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_address}\n"
                        f"üìÖ –î–∞—Ç–∞: {created_at}\n"
                        f"üìå –°—Ç–∞—Ç—É—Å: {order['status']}\n"
                        f"üí∞ –°—É–º–º–∞: {order['total_price']} —Ä—É–±."
                    )
                    await message.answer(text, parse_mode="HTML")
                elif response.status == 404:
                    await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.")
                else:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.")
    except (IndexError, ValueError):
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞. –ü—Ä–∏–º–µ—Ä: `/order 7`")


# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@dp.message(Command("new_order"))
async def new_order(message: types.Message, state: FSMContext):
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å –≤—ã–±–æ—Ä–æ–º –∞–¥—Ä–µ—Å–∞"""
    user_id = message.from_user.id
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/user/{user_id}/address") as response:
            if response.status == 200:
                user_data = await response.json()
                saved_address = user_data.get("delivery_address")

                if saved_address:
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=f"üìç {saved_address}", callback_data="use_saved_address")],
                        [InlineKeyboardButton(text="üÜï –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π", callback_data="new_address")]
                    ])
                    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=keyboard)
                else:
                    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
                    await state.set_state("waiting_for_address")


@dp.message(F.state == "waiting_for_address")
async def get_delivery_address(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    user_id = message.from_user.id
    address = message.text

    async with aiohttp.ClientSession() as session:
        await session.post(f"{API_URL}/user/{user_id}/address", json={"delivery_address": address})

    await message.answer(f"‚úÖ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {address}\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!")
    await state.clear()


@dp.callback_query(F.data == "use_saved_address")
async def use_saved_address(callback: CallbackQuery):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    user_id = callback.from_user.id
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/user/{user_id}/address") as response:
            if response.status == 200:
                user_data = await response.json()
                address = user_data.get("delivery_address", "–ù–µ —É–∫–∞–∑–∞–Ω")

                await callback.message.answer(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: {address}\n–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ API

    await callback.answer()




# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ (–∞–¥–º–∏–Ω–∫–∞)
@dp.callback_query()
async def handle_callback(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∫–∏"""
    if call.from_user.id != ADMIN_ID:
        await call.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)
        return

    data_parts = call.data.split("_")
    if len(data_parts) != 2:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
        return

    action, order_id = data_parts
    if not order_id.isdigit():
        await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–∫–∞–∑–∞.", show_alert=True)
        return

    order_id = int(order_id)

    status_mapping = {
        "confirm": "processing",
        "in_delivery": "delivering",
        "cancel": "canceled"
    }

    if action not in status_mapping:
        await call.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!", show_alert=True)
        return

    new_status = status_mapping[action]

    headers = {"Authorization": f"Bearer {settings.TELEGRAM_BOT_TOKEN}"}
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{API_URL}/orders/{order_id}/update/", json={"status": new_status}, headers=headers) as response:
            if response.status == 200:
                await call.message.edit_text(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} —Ç–µ–ø–µ—Ä—å {new_status}")
            else:
                await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")


# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())