"""
bot.py ‚Äì –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
"""
import os
import sys
import logging
import asyncio
import aiohttp
import re
from datetime import datetime, timedelta
from typing import cast

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
import django
if not os.environ.get("DJANGO_SETTINGS_MODULE"):
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "flowers.settings")
    django.setup()

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π Django –∏ –¥—Ä—É–≥–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
from django.conf import settings
from django.core.exceptions import ObjectDoesNotExist
from rest_framework.authtoken.models import Token
from asgiref.sync import sync_to_async

from core.models import User, Order, Report
from reports.analytics import generate_sales_report

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ DEBUG
    format='%(asctime)s - %(levelname)s - %(message)s',  # –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º logging.debug –≤–º–µ—Å—Ç–æ print
logging.debug("üîç PYTHONPATH: %s", sys.path)

# # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ setup()
# if not django.conf.settings.configured:
#     try:
#         django.setup()
#         print("‚úÖ Django –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
#     except RuntimeError as e:
#         print(f"‚ùå –û—à–∏–±–∫–∞ Django setup: {e}")
#         sys.exit(1)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
user_data = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
TOKEN = settings.TELEGRAM_BOT_TOKEN
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
TELEGRAM_ADMIN_ID = settings.TELEGRAM_ADMIN_ID

# URL API Django-—Å–µ—Ä–≤–µ—Ä–∞
API_URL = settings.API_URL

# üîπ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
customer_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")],
])

staff_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")],
])

admin_static_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="admin_orders")],
    [InlineKeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")]
])


def create_admin_keyboard(order_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞–∫–∞–∑–æ–º"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{order_id}")],
        [InlineKeyboardButton(text="üöö –í –¥–æ—Å—Ç–∞–≤–∫–µ", callback_data=f"in_delivery_{order_id}")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complet_{order_id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{order_id}")]
    ])


def get_keyboard_for_user(user):
    """–í—ã–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user.is_superuser:
        return admin_static_keyboard  # –¢–æ–ª—å–∫–æ –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
    elif user.is_staff:
        return staff_keyboard
    return customer_keyboard


request_contact_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)]],
    resize_keyboard=True
)


# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id = message.from_user.id
    username = message.from_user.username

    user = await sync_to_async(User.objects.filter(telegram_id=telegram_id).first, thread_sensitive=True)()

    if user:
        keyboard = get_keyboard_for_user(user)
        await message.answer("üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", reply_markup=keyboard)
    else:
        await message.answer("üîπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        dp.message.register(get_user_name, F.text)


# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
@dp.callback_query(lambda c: c.data == "admin_orders")
async def show_admin_orders(callback_query: types.CallbackQuery):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    telegram_id = callback_query.from_user.id
    user = await sync_to_async(User.objects.filter(telegram_id=telegram_id).first)()
    if not user:
        await callback_query.answer("üö´ –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    token = cast(Token, await sync_to_async(Token.objects.filter(user=user).first)())
    headers = {"Authorization": f"Token {token.key}"}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/orders/", headers=headers) as response:
            if response.status == 200:
                orders = await response.json()
                if not orders:
                    await callback_query.message.answer("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
                    return

                text = "üìã **–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:**\n\n"
                for order in orders:
                    text += f"üÜî {order['id']} | –°—Ç–∞—Ç—É—Å: {order['status']}\n"
                    keyboard = create_admin_keyboard(order["id"])
                    await callback_query.message.answer(text, reply_markup=keyboard)

            else:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤!", show_alert=True)


# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ (–∞–¥–º–∏–Ω–∫–∞)
@dp.callback_query()
async def handle_callback(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–∫–∞–∑–∞–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞)"""
    telegram_id = call.from_user.id
    user = await sync_to_async(User.objects.filter(telegram_id=telegram_id).first)()
    if not user:
        await call.answer("üö´ –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    if not user.is_staff and not user.is_superuser:
        await show_user_orders(call)
        return

    token = cast(Token, await sync_to_async(Token.objects.filter(user=user).first)())
    data_parts = call.data.rsplit("_", 1)

    if len(data_parts) == 1:
        if data_parts[0] == "analytics":
            await send_analytics(call)
        elif data_parts[0] == "admin_orders":
            await show_admin_orders(call)
        else:
            await call.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
        return

    if len(data_parts) != 2:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö! data_parts: {data_parts}")
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
        return

    action, order_id = data_parts
    if not order_id.isdigit():
        logging.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–∫–∞–∑–∞: {order_id}")
        await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–∫–∞–∑–∞.", show_alert=True)
        return

    order_id = int(order_id)
    status_mapping = {
        "confirm": "processing",
        "in_delivery": "delivering",
        "cancel": "canceled",
        "complet": "completed"
    }

    if action not in status_mapping:
        logging.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
        await call.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!", show_alert=True)
        return

    new_status = status_mapping[action]
    logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {order_id}, –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}")

    headers = {"Authorization": f"Token {token.key}"}
    payload = {"status": new_status}

    async with aiohttp.ClientSession() as session:
        logging.info(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {API_URL}/orders/{order_id}/update/ —Å –¥–∞–Ω–Ω—ã–º–∏ {payload}")
        async with session.post(f"{API_URL}/orders/{order_id}/update/", json=payload, headers=headers) as response:
            response_text = await response.text()
            logging.info(f"üì° API –æ—Ç–≤–µ—Ç–∏–ª: {response.status} - {response_text}")

            if response.status == 200:
                new_text = f"‚úÖ –ó–∞–∫–∞–∑ {order_id} —Ç–µ–ø–µ—Ä—å –≤ —Å—Ç–∞—Ç—É—Å–µ: {new_status}"
                if call.message:
                    await call.message.edit_text(new_text, reply_markup=create_admin_keyboard(order_id))
            else:
                await call.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.", show_alert=True)


# üîπ –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2
def escape_md(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2"""
    return re.sub(r"([_*\[\]()~`>#\+\-=|{}.!])", r"\\\1", str(text))


# üîπ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(F.data == "orders")
async def show_user_orders(call: types.CallbackQuery):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–∫–∞–∑—ã —Ç–µ–∫—É—â–µ–≥–æ, –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id = call.from_user.id
    user = await sync_to_async(User.objects.filter(telegram_id=telegram_id).first)()
    if not user:
        await call.answer("üö´ –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    token = await sync_to_async(Token.objects.filter(user=user).first)()
    if not token:
        await call.answer("üö´ –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    headers = {"Authorization": f"Token {token.key}"}
    async with aiohttp.ClientSession() as session:
        logging.debug(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π —Ç–æ–∫–µ–Ω: {headers}")
        async with session.get(f"{API_URL}/orders/?telegram_id={telegram_id}", headers=headers) as response:
            orders_data = await response.json()

            if response.status != 200 or not orders_data:
                await call.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", show_alert=True)
                return

    orders_text = "üì¶ *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n\n"
    for order in orders_data:
        order_text = (
            f"üÜî –ó–∞–∫–∞–∑ {escape_md(str(order['id']))}\n"
            f"üìç –ê–¥—Ä–µ—Å: {escape_md(str(order['delivery_address']))}\n"
            f"üí∞ –°—É–º–º–∞: {escape_md(str(order['total_price']))} —Ä—É–±\n"
            f"üìÖ –î–∞—Ç–∞: {escape_md(str(order['order_date']))}\n"
            f"üìå –°—Ç–∞—Ç—É—Å: {escape_md(str(order['status']))}\n"
            f"{escape_md('--------------------------------')}\n"
        )

        if len(orders_text) + len(order_text) > 4000:
            await call.message.answer(orders_text, parse_mode="MarkdownV2")
            orders_text = "üì¶ *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ...)*\n\n"

        orders_text += order_text

    if orders_text:
        await call.message.answer(orders_text, parse_mode="MarkdownV2")


async def get_user_name(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id = message.from_user.id
    username = message.from_user.username
    full_name = message.text.strip()

    user_data[telegram_id] = {"full_name": full_name, "username": username}

    await message.answer("üìû –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                         reply_markup=request_contact_keyboard)


@dp.message(F.contact)
async def register_user(message: types.Message):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É"""
    telegram_id = message.from_user.id
    phone_number = message.contact.phone_number

    user_info = user_data.pop(telegram_id, {})
    full_name = user_info.get("full_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    username = user_info.get("username", None)

    user = await sync_to_async(User.objects.create)(
        telegram_id=telegram_id,
        username=username or f"user_{telegram_id}",
        first_name=full_name,
        phone_number=phone_number
    )
    token = await sync_to_async(Token.objects.create)(user=user)
    logging.info(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {token.key}")

    await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.", reply_markup=customer_keyboard)


# üîπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
async def notify_admin(order_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
    try:
        order = await sync_to_async(Order.objects.get)(id=order_id)
        message = (
            f"üõí *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n"
            f"üìå *ID*: {order.id}\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*: {order.user.username}\n"
            f"üì¶ *–¢–æ–≤–∞—Ä—ã*: {order.products.all().count()} —à—Ç.\n"
            f"üìç *–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞*: {order.order_date.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìå *–°—Ç–∞—Ç—É—Å*: {order.get_status_display()}"
        )
        await bot.send_message(chat_id=TELEGRAM_ADMIN_ID, text=message, parse_mode="HTML")
    except ObjectDoesNotExist as e:
        logging.error(f"–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. {e}")


# üîπ –ö–Ω–æ–ø–∫–∞ "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
@dp.callback_query(F.data == "analytics")
async def send_analytics(call: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    today = datetime.now().date()
    yesterday = today - timedelta(days=30)

    report = await sync_to_async(Report.objects.order_by("-date").first)()
    if not report or report.date < yesterday:
        logging.info("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞...")
        report = await sync_to_async(generate_sales_report)(yesterday, today)

    if not report:
        await call.answer("üìä –î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return

    pending_orders = int(report.pending_orders)
    pending_revenue = float(report.pending_revenue)
    processing_orders = int(report.processing_orders)
    processing_revenue = float(report.processing_revenue)
    delivering_orders = int(report.delivering_orders)
    delivering_revenue = float(report.delivering_revenue)
    completed_orders = int(report.completed_orders)
    completed_revenue = float(report.completed_revenue)
    canceled_orders = int(report.canceled_orders)
    canceled_revenue = float(report.canceled_revenue)

    total_orders = pending_orders + processing_orders + delivering_orders + completed_orders
    total_revenue = pending_revenue + processing_revenue + delivering_revenue + completed_revenue

    message = (
        f"üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π –Ω–∞ {escape_md(report.date)}*\n"
        f"```\n"
        f"{'–°—Ç–∞—Ç—É—Å':<15} {'–í—ã—Ä—É—á–∫–∞':>10} {'–ó–∞–∫–∞–∑—ã':>8}\n"
        f"{'-' * 34}\n"
        f"{'–í –æ–±—Ä–∞–±–æ—Ç–∫–µ':<15} {pending_revenue:>10.2f} {pending_orders:>8}\n"
        f"{'–í —Ä–∞–±–æ—Ç–µ':<15} {processing_revenue:>10.2f} {processing_orders:>8}\n"
        f"{'–í –¥–æ—Å—Ç–∞–≤–∫–µ':<15} {delivering_revenue:>10.2f} {delivering_orders:>8}\n"
        f"{'–í—ã–ø–æ–ª–Ω–µ–Ω–æ':<15} {completed_revenue:>10.2f} {completed_orders:>8}\n"
        f"{'-' * 34}\n"
        f"{'–ò–¢–û–ì–û':<15} {total_revenue:>10.2f} {total_orders:>8}\n"
        f"{'–û—Ç–º–µ–Ω–µ–Ω–æ':<15} {canceled_revenue:>10.2f} {canceled_orders:>8}\n"
        f"```"
    )

    await call.message.answer(message, parse_mode="MarkdownV2")


@dp.message(Command("link"))
async def link_telegram(message: types.Message):
    """–ü—Ä–∏–≤—è–∑–∫–∞ Telegram ID –∫ –∞–∫–∫–∞—É–Ω—Ç—É"""
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.reply("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /link <ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")
        return

    user_id = int(args[1])
    user = await sync_to_async(User.objects.filter(id=user_id).first)()
    if user:
        user.telegram_id = message.from_user.id
        await sync_to_async(user.save)()
        await message.reply("‚úÖ Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!")
    else:
        await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")


# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /orders
@dp.message(Command("orders"))
async def get_orders(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"""
    telegram_id = message.from_user.id
    user = await sync_to_async(User.objects.filter(telegram_id=telegram_id).first)()
    if not user:
        await message.answer("üö´ –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    token = await sync_to_async(Token.objects.filter(user=user).first)()
    if not token:
        await message.answer("üö´ –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    headers = {"Authorization": f"Token {token.key}"}
    async with aiohttp.ClientSession() as session:
        logging.debug(f"üîç –¢–æ–∫–µ–Ω, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ API: {settings.TELEGRAM_API_TOKEN}")
        async with session.get(f"{API_URL}/orders/?telegram_id={telegram_id}", headers=headers) as response:
            response_text = await response.text()
            logging.debug(f"üì° API –æ—Ç–≤–µ—Ç–∏–ª: {response_text}")

            if response.status == 200:
                orders = await response.json()
                if not orders:
                    await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
                    return

                text = "üìã **–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:**\n\n"
                for order in orders:
                    text += f"üÜî {order['id']} | –°—Ç–∞—Ç—É—Å: {order['status']}\n"

                for chunk in [text[i:i + 4000] for i in range(0, len(text), 4000)]:
                    await message.answer(chunk, parse_mode="HTML")
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤. –ö–æ–¥: {response.status}")
                logging.error(response_text)


# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /order <id>
@dp.message(Command("order"))
async def order_detail(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    try:
        order_id = int(message.text.split()[1])
        telegram_id = message.from_user.id

        user = await sync_to_async(User.objects.filter(telegram_id=telegram_id).first)()
        if not user:
            await message.answer("üö´ –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        token = await sync_to_async(Token.objects.filter(user=user).first)()
        if not token:
            await message.answer("üö´ –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        headers = {"Authorization": f"Token {token.key}"}
        logging.debug(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {headers}")
        async with aiohttp.ClientSession() as session:
            logging.debug(f"üîç –¢–æ–∫–µ–Ω, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ API: {settings.TELEGRAM_API_TOKEN}")
            async with session.get(f"{API_URL}/orders/{order_id}/?telegram_id={telegram_id}", headers=headers) as response:
                if response.status == 200:
                    order = await response.json()
                    logging.debug(f"üîç –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: {order}")

                    delivery_address = order.get("delivery_address", "–ù–µ —É–∫–∞–∑–∞–Ω")
                    created_at = order.get("order_date", order.get("created_at", "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"))
                    products_list = ", ".join([product["name"] for product in order.get("products", [])])

                    text = (
                        f"üõí **–ó–∞–∫–∞–∑ {order.get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}**\n"
                        f"üì¶ –¢–æ–≤–∞—Ä—ã: {products_list}\n"
                        f"üìç –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_address}\n"
                        f"üìÖ –î–∞—Ç–∞: {created_at}\n"
                        f"üìå –°—Ç–∞—Ç—É—Å: {order.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
                        f"üí∞ –°—É–º–º–∞: {order.get('total_price', '0')} —Ä—É–±."
                    )
                    await message.answer(text, parse_mode="HTML")

                elif response.status == 404:
                    await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID.")
                else:
                    response_text = await response.text()
                    await message.answer(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞. –ö–æ–¥: {response.status}\n{response_text}"
                    )

    except (IndexError, ValueError):
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞. –ü—Ä–∏–º–µ—Ä: `/order 7`")


# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@dp.message(Command("new_order"))
async def new_order(message: types.Message, state: FSMContext):
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å –≤—ã–±–æ—Ä–æ–º –∞–¥—Ä–µ—Å–∞"""
    user_id = message.from_user.id
    async with aiohttp.ClientSession() as session:
        logging.debug(f"üîç –¢–æ–∫–µ–Ω, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ API: {settings.TELEGRAM_API_TOKEN}")
        async with session.get(f"{API_URL}/user/{user_id}/address") as response:
            if response.status == 200:
                user_data = await response.json()
                saved_address = user_data.get("delivery_address")

                if saved_address:
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=f"üìç {saved_address}", callback_data="use_saved_address")],
                        [InlineKeyboardButton(text="üÜï –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π", callback_data="new_address")]
                    ])
                    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=keyboard)
                else:
                    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
                    await state.set_state("waiting_for_address")


@dp.message(F.state=="waiting_for_address")
async def get_delivery_address(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    user_id = message.from_user.id
    address = message.text

    async with aiohttp.ClientSession() as session:
        await session.post(f"{API_URL}/user/{user_id}/address", json={"delivery_address": address})

    await message.answer(f"‚úÖ –ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {address}\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!")
    await state.clear()


@dp.callback_query(F.data == "use_saved_address")
async def use_saved_address(callback: CallbackQuery):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    user_id = callback.from_user.id
    async with aiohttp.ClientSession() as session:
        logging.debug(f"üîç –¢–æ–∫–µ–Ω, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –≤ API: {settings.TELEGRAM_API_TOKEN}")
        async with session.get(f"{API_URL}/user/{user_id}/address") as response:
            if response.status == 200:
                user_data = await response.json()
                address = user_data.get("delivery_address", "–ù–µ —É–∫–∞–∑–∞–Ω")

                await callback.message.answer(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: {address}\n–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ API

    await callback.answer()


# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    asyncio.run(main())