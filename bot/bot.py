"""
bot.py ‚Äì –∑–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
"""

import os
import sys
import asyncio
import requests
import django
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from django.conf import settings

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
print("üîç PYTHONPATH:", sys.path)

# –£–∫–∞–∑—ã–≤–∞–µ–º Django, –≥–¥–µ –∏—Å–∫–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "flowers.settings")

# –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ setup()
if not django.conf.settings.configured:
    try:
        django.setup()
        print("‚úÖ Django –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
    except RuntimeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Django setup: {e}")
        sys.exit(1)

from django.conf import settings  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Django

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
TOKEN = settings.TELEGRAM_BOT_TOKEN
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
ADMIN_ID = settings.TELEGRAM_ADMIN_ID

# URL API Django-—Å–µ—Ä–≤–µ—Ä–∞
API_URL = settings.API_URL

# üîπ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
orders_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders")],
    [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")]
])

admin_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
    [InlineKeyboardButton(text="üöö –í –¥–æ—Å—Ç–∞–≤–∫–µ", callback_data="in_delivery")],
    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
])

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await message.answer(
        "üå∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FlowerDeliveryBot!\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /orders.",
        reply_markup=orders_keyboard
    )

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /orders
@dp.message(Command("orders"))
async def get_orders(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"""
    response = requests.get(f"{API_URL}/orders/")
    if response.status_code == 200:
        orders = response.json()
        text = "üìã **–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:**\n\n"
        for order in orders:
            text += f"üÜî {order['id']} | {order['status']}\n"
        await message.answer(text, parse_mode="Markdown")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.")

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /order <id>
@dp.message(Command("order"))
async def get_order_detail(message: types.Message):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    try:
        order_id = int(message.text.split()[1])
        response = requests.get(f"{API_URL}/orders/{order_id}/")
        if response.status_code == 200:
            order = response.json()
            text = (
                f"üõí **–ó–∞–∫–∞–∑ {order['id']}**\n"
                f"üì¶ –¢–æ–≤–∞—Ä—ã: {order['items']}\n"
                f"üìç –î–æ—Å—Ç–∞–≤–∫–∞: {order['delivery_address']}\n"
                f"üìÖ –î–∞—Ç–∞: {order['created_at']}\n"
                f"üìå –°—Ç–∞—Ç—É—Å: {order['status']}"
            )
            await message.answer(text, parse_mode="Markdown")
        else:
            await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except (IndexError, ValueError):
        await message.answer("‚ö† –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–∫–∞–∑–∞. –ü—Ä–∏–º–µ—Ä: `/order 123`")

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ (–∞–¥–º–∏–Ω–∫–∞)
@dp.callback_query()
async def handle_callback(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    if call.data == "refresh":
        await get_orders(call.message)
    elif call.data in ["confirm", "in_delivery", "cancel"]:
        order_id = call.message.text.split()[1]  # ID –∑–∞–∫–∞–∑–∞
        new_status = {"confirm": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω", "in_delivery": "–í –¥–æ—Å—Ç–∞–≤–∫–µ", "cancel": "–û—Ç–º–µ–Ω–µ–Ω"}[call.data]
        response = requests.post(f"{API_URL}/orders/{order_id}/", json={"status": new_status})
        if response.status_code == 200:
            await call.message.answer(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} —Ç–µ–ø–µ—Ä—å {new_status}", reply_markup=admin_keyboard)
        else:
            await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
