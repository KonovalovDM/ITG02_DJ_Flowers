# API –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
from rest_framework.permissions import IsAuthenticated, IsAdminUser
from rest_framework.decorators import api_view, permission_classes
from rest_framework.response import Response
from rest_framework import status, serializers
from django.views.decorators.csrf import csrf_exempt
from .models import Order, Product, User
from .serializers import OrderSerializer, ProductSerializer
from django.shortcuts import get_object_or_404
from rest_framework.authentication import TokenAuthentication
from rest_framework.permissions import AllowAny

@api_view(['GET'])
def product_list(request):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    products = Product.objects.all()
    serializer = ProductSerializer(products, many=True)
    return Response(serializer.data)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def order_list(request):
    """–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤: –∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏"""
    if request.user.is_staff:
        orders = Order.objects.all()  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã
    else:
        orders = Order.objects.filter(user=request.user)  # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏

    serializer = OrderSerializer(orders, many=True)
    return Response(serializer.data)


@api_view(['POST'])
@permission_classes([IsAuthenticated])  # –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
def update_order_status(request, order_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞"""
    try:
        order = Order.objects.get(id=order_id)
        print(f"üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {order.id}")  # ‚úÖ –õ–æ–≥ –∑–∞–ø—Ä–æ—Å–∞

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω –∏–ª–∏ —Å–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
        if not (request.user.is_staff or order.user == request.user):
            print("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞")  # ‚úÖ –õ–æ–≥ –æ—à–∏–±–∫–∏ –ø—Ä–∞–≤
            return Response({'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞'},
                            status=status.HTTP_403_FORBIDDEN)

        new_status = request.data.get('status', order.status)
        print(f"üîÑ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {new_status}")  # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        if new_status not in ['processing', 'delivering', 'completed', 'canceled']:  # ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ 'completed'
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å!")  # ‚úÖ –õ–æ–≥ –æ—à–∏–±–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            return Response({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å'}, status=status.HTTP_400_BAD_REQUEST)

        order.status = new_status
        order.save()
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order.id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {order.status}")  # ‚úÖ –õ–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

        return Response({'message': '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω', 'status': order.status}, status=status.HTTP_200_OK)
    except Order.DoesNotExist:
        print("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")  # ‚úÖ –õ–æ–≥ –æ—à–∏–±–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∑–∞–∫–∞–∑–∞
        return Response({'error': '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=status.HTTP_404_NOT_FOUND)

@api_view(['GET'])
@permission_classes([IsAuthenticated])  # <-- –¢–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
def order_detail(request, order_id):
    """–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞: –∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏"""
    try:
        order = Order.objects.get(id=order_id)

        if not request.user.is_staff and order.user != request.user:
            return Response({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}, status=status.HTTP_403_FORBIDDEN)

        serializer = OrderSerializer(order)
        return Response(serializer.data)

    except Order.DoesNotExist:
        return Response({'error': '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=status.HTTP_404_NOT_FOUND)

@api_view(['GET'])
@permission_classes([IsAuthenticated])  # <-- –¢–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
def get_delivery_address(request):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"""
    user = request.user
    return Response({'delivery_address': user.delivery_address or '–ù–µ —É–∫–∞–∑–∞–Ω'}, status=status.HTTP_200_OK)

@api_view(['POST'])
@permission_classes([IsAuthenticated])  # <-- –¢–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
def save_delivery_address(request):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"""
    user = request.user
    new_address = request.data.get('delivery_address', '').strip()

    if not new_address:
        return Response({'error': '–ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}, status=status.HTTP_400_BAD_REQUEST)

    user.delivery_address = new_address
    user.save()
    return Response({'message': '–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω'}, status=status.HTTP_200_OK)

@csrf_exempt
@api_view(['GET'])
@permission_classes([IsAuthenticated])  # –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º
def api_orders(request):
    """–ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏"""
    if request.user.is_staff:
        orders = Order.objects.all()  # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã
    else:
        orders = Order.objects.filter(user=request.user)  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã

    serializer = OrderSerializer(orders, many=True)
    return Response(serializer.data, status=status.HTTP_200_OK)

import logging
logger = logging.getLogger(__name__)

@api_view(["GET"])
@permission_classes([IsAuthenticated])
def get_orders(request):
    user = request.user
    telegram_id = request.query_params.get('telegram_id')

    if telegram_id:
        user = User.objects.filter(telegram_id=telegram_id).first()
        if not user:
            return Response({'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}, status=status.HTTP_404_NOT_FOUND)

    # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏
    orders = Order.objects.all() if user.is_staff else Order.objects.filter(user=user)

    logger.debug(f"üì¶ {user.username} –∑–∞–ø—Ä–æ—Å–∏–ª –∑–∞–∫–∞–∑—ã: {[order.id for order in orders]}")

    serializer = OrderSerializer(orders, many=True)
    return Response(serializer.data)


@api_view(["GET"])
@permission_classes([IsAuthenticated])
def get_order_details(request, order_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user = request.user  # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if user.is_staff:
        order = get_object_or_404(Order, id=order_id)  # –ê–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã
    else:
        order = get_object_or_404(Order, id=order_id, user=user)  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏

    logger.debug(f"üì¶ –ó–∞–ø—Ä–æ—à–µ–Ω –∑–∞–∫–∞–∑ {order.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.username}")

    serializer = OrderSerializer(order)
    return Response(serializer.data)




