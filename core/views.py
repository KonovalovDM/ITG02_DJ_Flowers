from django.core.mail import send_mail
from django.conf import settings
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from .models import Product, Order, User
from .forms import OrderForm, UserRegisterForm
from core.telegram_bot import notify_admin
from asgiref.sync import sync_to_async
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth import login
from .forms import UserUpdateForm  # –ò–º–ø–æ—Ä—Ç —Ñ–æ—Ä–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è


import asyncio
import threading

def register(request):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å—Å—ã–ª–∫–∏ –≤ Telegram"""
    if request.method == "POST":
        form = UserRegisterForm(request.POST)
        if form.is_valid():
            user = form.save()
            telegram_message = f"–ü—Ä–∏–≤–µ—Ç, {user.username}! –ü—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à Telegram, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /link {user.id} –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ."
            send_mail(
                "–ü—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à Telegram",
                telegram_message,
                settings.DEFAULT_FROM_EMAIL,
                [user.email],
                fail_silently=True,
            )
            return redirect("login")  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
    else:
        form = UserRegisterForm()
    return render(request, "registration/register.html", {"form": form})

@login_required
def some_view(request):
    context = {
        'username': request.user.username,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
    return render(request, 'your_template.html', context)

def index(request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render(request, "index.html")

def catalog(request):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ü–≤–µ—Ç–æ–≤"""
    products = Product.objects.all()
    return render(request, 'catalog.html', {'products': products})

@login_required
def cart(request):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã"""
    return render(request, 'cart.html')


import logging

@login_required
def place_order(request):
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –≤—ã–±–æ—Ä–æ–º –∏–ª–∏ –≤–≤–æ–¥–æ–º –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    logging.debug("üîπ –í—ã–∑–≤–∞–Ω–∞ place_order")

    saved_addresses = list(Order.objects.filter(user=request.user)
                           .values_list("delivery_address", flat=True)
                           .distinct())
    if request.user.delivery_address:
        saved_addresses.insert(0, request.user.delivery_address)  # –û—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞

    if request.method == "POST":
        logging.debug("üì® POST-–∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω")

        selected_address = request.POST.get("delivery_address")
        new_address = request.POST.get("new_address", "").strip()

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å
        if selected_address == "new" and new_address:
            delivery_address = new_address
            request.user.delivery_address = new_address  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–æ—Ñ–∏–ª—å
            request.user.save()
            logging.debug(f"üìç –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {delivery_address}")
        else:
            delivery_address = selected_address
            logging.debug(f"üìç –í—ã–±—Ä–∞–Ω –∞–¥—Ä–µ—Å: {delivery_address}")

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
        cart = request.session.get("cart", {})
        if not cart:
            messages.error(request, "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
            return redirect("cart")

        logging.debug(f"üõí –¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ: {cart}")

        # ‚úÖ –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ (–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—ã)
        order = Order.objects.create(
            user=request.user,
            delivery_address=delivery_address,
            price=sum(float(item["price"]) * item["quantity"] for item in cart.values()),
            status="pending"
        )
        logging.debug(f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: ID {order.id}")

        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
        product_ids = map(int, cart.keys())
        products = Product.objects.filter(id__in=product_ids)
        order.products.set(products)
        logging.debug(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã: {list(products.values_list('name', flat=True))}")

        # ‚úÖ –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞
        request.session["cart"] = {}
        request.session["delivery_address"] = order.delivery_address
        request.session.modified = True

        # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_message = (
                f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {request.user.username} (ID: {request.user.id})\n"
                f"üìç –ê–¥—Ä–µ—Å: {order.delivery_address}\n"
                f"üí∞ –°—É–º–º–∞: {order.price} —Ä—É–±.\n"
                f"üõí –¢–æ–≤–∞—Ä—ã: " + ", ".join(order.products.values_list("name", flat=True))
        )

        # ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
        threading.Thread(target=lambda: asyncio.run(notify_admin(admin_message))).start()

        messages.success(request, "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        return redirect("order_history")  # ‚úÖ –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –Ω–∞ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"

    return render(request, "order.html", {"saved_addresses": saved_addresses})



@login_required
def repeat_order(request, order_id):
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –∑–∞–∫–∞–∑, –¥–æ–±–∞–≤–ª—è—è —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    old_order = get_object_or_404(Order, id=order_id, user=request.user)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    cart = request.session.get("cart", {})
    cart.clear()  # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º –∑–∞–∫–∞–∑–∞

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞
    for product in old_order.products.all():
        cart[str(product.id)] = {
            "name": product.name,
            "price": float(product.price),
            "image": product.image.url,
            "quantity": 1,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤–ª—è–µ–º 1 (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –ø—Ä–æ—à–ª–æ–µ)
        }

    request.session["cart"] = cart
    request.session["delivery_address"] = old_order.delivery_address  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å

    request.session.modified = True
    return redirect("cart")  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ—Ä–∑–∏–Ω—É


@login_required
def order_history(request):
    """–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    orders = Order.objects.filter(user=request.user) \
        .select_related("user") \
        .prefetch_related("products")  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    return render(request, 'order_history.html', {'orders': orders})



def add_to_cart(request, product_id):
    product = get_object_or_404(Product, id=product_id)

    cart = request.session.get("cart", {})  # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏–∑ —Å–µ—Å—Å–∏–∏
    if str(product_id) in cart:
        cart[str(product_id)]["quantity"] += 1
    else:
        cart[str(product_id)] = {
            "name": product.name,
            "price": float(product.price),
            "image": product.image.url,
            "quantity": 1,
        }

    request.session["cart"] = cart  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    request.session.modified = True  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é

    return redirect("cart")  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É


@login_required
def cart_view(request):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∞–¥—Ä–µ—Å–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏"""
    cart = request.session.get("cart", {})
    delivery_address = request.session.get("delivery_address", request.user.delivery_address)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å

    return render(request, "cart.html", {"cart": cart, "delivery_address": delivery_address})


@login_required
def profile(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if request.method == "POST":
        form = UserUpdateForm(request.POST, instance=request.user)
        if form.is_valid():
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é
            request.user.delivery_address = form.cleaned_data["delivery_address"]
            request.user.save()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            messages.success(request, "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            return redirect("profile")
    else:
        form = UserUpdateForm(instance=request.user)

    delivery_address = request.user.delivery_address or "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"

    return render(request, "profile.html", {
        "form": form,
        "delivery_address": delivery_address
    })
